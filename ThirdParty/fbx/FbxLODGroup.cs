//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxLODGroup : FbxNodeAttribute {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxLODGroup(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FbxWrapperNativePINVOKE.FbxLODGroup_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxLODGroup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(FbxWrapperNativePINVOKE.FbxLODGroup_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxLODGroup Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxLODGroup ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLODGroup(cPtr, false);
    return ret;
  }

  public new static FbxLODGroup Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxLODGroup ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxLODGroup(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)FbxWrapperNativePINVOKE.FbxLODGroup_GetAttributeType(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t ThresholdsUsedAsPercentage {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_ThresholdsUsedAsPercentage_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_ThresholdsUsedAsPercentage_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t MinMaxDistance {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_MinMaxDistance_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_MinMaxDistance_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyTFbxDouble MinDistance {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_MinDistance_set(swigCPtr, FbxPropertyTFbxDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_MinDistance_get(swigCPtr);
      FbxPropertyTFbxDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTFbxDouble(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyTFbxDouble MaxDistance {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_MaxDistance_set(swigCPtr, FbxPropertyTFbxDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_MaxDistance_get(swigCPtr);
      FbxPropertyTFbxDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTFbxDouble(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t WorldSpace {
    set {
      FbxWrapperNativePINVOKE.FbxLODGroup_WorldSpace_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxLODGroup_WorldSpace_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public int GetNumThresholds() {
    int ret = FbxWrapperNativePINVOKE.FbxLODGroup_GetNumThresholds(swigCPtr);
    return ret;
  }

  public bool AddThreshold(FbxDistance pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_AddThreshold__SWIG_0(swigCPtr, FbxDistance.getCPtr(pThreshValue));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddThreshold(double pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_AddThreshold__SWIG_1(swigCPtr, pThreshValue);
    return ret;
  }

  public bool SetThreshold(int pEl, FbxDistance pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_SetThreshold__SWIG_0(swigCPtr, pEl, FbxDistance.getCPtr(pThreshValue));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetThreshold(int pEl, double pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_SetThreshold__SWIG_1(swigCPtr, pEl, pThreshValue);
    return ret;
  }

  public bool GetThreshold(int pEl, FbxDistance pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_GetThreshold__SWIG_0(swigCPtr, pEl, FbxDistance.getCPtr(pThreshValue));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetThreshold(int pEl, SWIGTYPE_p_double pThreshValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_GetThreshold__SWIG_1(swigCPtr, pEl, SWIGTYPE_p_double.getCPtr(pThreshValue));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumDisplayLevels() {
    int ret = FbxWrapperNativePINVOKE.FbxLODGroup_GetNumDisplayLevels(swigCPtr);
    return ret;
  }

  public bool AddDisplayLevel(FbxLODGroup.EDisplayLevel pValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_AddDisplayLevel(swigCPtr, (int)pValue);
    return ret;
  }

  public bool SetDisplayLevel(int pEl, FbxLODGroup.EDisplayLevel pValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_SetDisplayLevel(swigCPtr, pEl, (int)pValue);
    return ret;
  }

  public bool GetDisplayLevel(int pEl, SWIGTYPE_p_FbxLODGroup__EDisplayLevel pValue) {
    bool ret = FbxWrapperNativePINVOKE.FbxLODGroup_GetDisplayLevel(swigCPtr, pEl, SWIGTYPE_p_FbxLODGroup__EDisplayLevel.getCPtr(pValue));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(FbxWrapperNativePINVOKE.FbxLODGroup_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override FbxStringList GetTypeFlags() {
    FbxStringList ret = new FbxStringList(FbxWrapperNativePINVOKE.FbxLODGroup_GetTypeFlags(swigCPtr), true);
    return ret;
  }

  public enum EDisplayLevel {
    eUseLOD,
    eShow,
    eHide
  }

}

}

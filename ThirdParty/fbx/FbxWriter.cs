//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxWriter : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxWriter(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxWriter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxWriter() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FbxWrapperNativePINVOKE.delete_FbxWriter(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual bool FileCreate(string pFileName) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_FileCreate__SWIG_0(swigCPtr, pFileName);
    return ret;
  }

  public virtual bool FileCreate(FbxStream pStream, SWIGTYPE_p_void pStreamData) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_FileCreate__SWIG_1(swigCPtr, FbxStream.getCPtr(pStream), SWIGTYPE_p_void.getCPtr(pStreamData));
    return ret;
  }

  public virtual bool FileClose() {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_FileClose(swigCPtr);
    return ret;
  }

  public virtual bool IsFileOpen() {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_IsFileOpen(swigCPtr);
    return ret;
  }

  public virtual void GetWriteOptions() {
    FbxWrapperNativePINVOKE.FbxWriter_GetWriteOptions(swigCPtr);
  }

  public virtual bool Write(FbxDocument pDocument) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_Write(swigCPtr, FbxDocument.getCPtr(pDocument));
    return ret;
  }

  public virtual bool PreprocessScene(FbxScene pScene) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_PreprocessScene(swigCPtr, FbxScene.getCPtr(pScene));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool PostprocessScene(FbxScene pScene) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_PostprocessScene(swigCPtr, FbxScene.getCPtr(pScene));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void PluginWriteParameters(FbxObject pParams) {
    FbxWrapperNativePINVOKE.FbxWriter_PluginWriteParameters(swigCPtr, FbxObject.getCPtr(pParams));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual FbxNode FindRootNode(FbxScene pScene) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxWriter_FindRootNode(swigCPtr, FbxScene.getCPtr(pScene));
    FbxNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxNode(cPtr, false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool CheckSpaceInNodeNameRecursive(FbxNode pNode, FbxString pNodeNameList) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_CheckSpaceInNodeNameRecursive(swigCPtr, FbxNode.getCPtr(pNode), FbxString.getCPtr(pNodeNameList));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SetFileExportVersion(FbxString pVersion) {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_SetFileExportVersion(swigCPtr, FbxString.getCPtr(pVersion));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRenamingMode(FbxSceneRenamer.ERenamingMode pRenamingMode) {
    FbxWrapperNativePINVOKE.FbxWriter_SetRenamingMode(swigCPtr, (int)pRenamingMode);
  }

  public void SetResamplingRate(double pResamplingRate) {
    FbxWrapperNativePINVOKE.FbxWriter_SetResamplingRate(swigCPtr, pResamplingRate);
  }

  public bool IsGenuine() {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_IsGenuine(swigCPtr);
    return ret;
  }

  public virtual FbxIOSettings GetIOSettings() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxWriter_GetIOSettings(swigCPtr);
    FbxIOSettings ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxIOSettings(cPtr, false);
    return ret;
  }

  public virtual void SetIOSettings(FbxIOSettings pIOSettings) {
    FbxWrapperNativePINVOKE.FbxWriter_SetIOSettings(swigCPtr, FbxIOSettings.getCPtr(pIOSettings));
  }

  public virtual void SetProgressHandler(FbxProgress arg0) {
    FbxWrapperNativePINVOKE.FbxWriter_SetProgressHandler(swigCPtr, FbxProgress.getCPtr(arg0));
  }

  public virtual bool SupportsStreams() {
    bool ret = FbxWrapperNativePINVOKE.FbxWriter_SupportsStreams(swigCPtr);
    return ret;
  }

  public FbxStatus GetStatus() {
    FbxStatus ret = new FbxStatus(FbxWrapperNativePINVOKE.FbxWriter_GetStatus(swigCPtr), false);
    return ret;
  }

  public enum EInfoRequest {
    eInfoExtension,
    eInfoDescriptions,
    eInfoVersions,
    eInfoCompatibleDesc,
    eInfoUILabel,
    eReserved1 = 0xFBFB
  }

}

}

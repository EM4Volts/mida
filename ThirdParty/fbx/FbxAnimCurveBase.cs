//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxAnimCurveBase : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxAnimCurveBase(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FbxWrapperNativePINVOKE.FbxAnimCurveBase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAnimCurveBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      FbxWrapperNativePINVOKE.FbxAnimCurveBase_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAnimCurveBase_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxAnimCurveBase Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Create(FbxManager.getCPtr(pManager), pName);
    FbxAnimCurveBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveBase(cPtr, false);
    return ret;
  }

  public virtual void KeyClear() {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyClear(swigCPtr);
  }

  public virtual int KeyGetCount() {
    int ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyGetCount(swigCPtr);
    return ret;
  }

  public virtual int KeyAdd(FbxTime pTime, FbxAnimCurveKeyBase pKey, SWIGTYPE_p_int pLast) {
    int ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyAdd__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime), FbxAnimCurveKeyBase.getCPtr(pKey), SWIGTYPE_p_int.getCPtr(pLast));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int KeyAdd(FbxTime pTime, FbxAnimCurveKeyBase pKey) {
    int ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyAdd__SWIG_1(swigCPtr, FbxTime.getCPtr(pTime), FbxAnimCurveKeyBase.getCPtr(pKey));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool KeySet(int pIndex, FbxAnimCurveKeyBase pKey) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeySet(swigCPtr, pIndex, FbxAnimCurveKeyBase.getCPtr(pKey));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool KeyRemove(int pIndex) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyRemove__SWIG_0(swigCPtr, pIndex);
    return ret;
  }

  public virtual bool KeyRemove(int pStartIndex, int pEndIndex) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyRemove__SWIG_1(swigCPtr, pStartIndex, pEndIndex);
    return ret;
  }

  public virtual FbxTime KeyGetTime(int arg0) {
    FbxTime ret = new FbxTime(FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeyGetTime(swigCPtr, arg0), true);
    return ret;
  }

  public virtual void KeySetTime(int pKeyIndex, FbxTime pTime) {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_KeySetTime(swigCPtr, pKeyIndex, FbxTime.getCPtr(pTime));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreExtrapolation(FbxAnimCurveBase.EExtrapolationType pExtrapolation) {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_SetPreExtrapolation(swigCPtr, (int)pExtrapolation);
  }

  public FbxAnimCurveBase.EExtrapolationType GetPreExtrapolation() {
    FbxAnimCurveBase.EExtrapolationType ret = (FbxAnimCurveBase.EExtrapolationType)FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetPreExtrapolation(swigCPtr);
    return ret;
  }

  public void SetPreExtrapolationCount(uint pCount) {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_SetPreExtrapolationCount(swigCPtr, pCount);
  }

  public uint GetPreExtrapolationCount() {
    uint ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetPreExtrapolationCount(swigCPtr);
    return ret;
  }

  public void SetPostExtrapolation(FbxAnimCurveBase.EExtrapolationType pExtrapolation) {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_SetPostExtrapolation(swigCPtr, (int)pExtrapolation);
  }

  public FbxAnimCurveBase.EExtrapolationType GetPostExtrapolation() {
    FbxAnimCurveBase.EExtrapolationType ret = (FbxAnimCurveBase.EExtrapolationType)FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetPostExtrapolation(swigCPtr);
    return ret;
  }

  public void SetPostExtrapolationCount(uint pCount) {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_SetPostExtrapolationCount(swigCPtr, pCount);
  }

  public uint GetPostExtrapolationCount() {
    uint ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetPostExtrapolationCount(swigCPtr);
    return ret;
  }

  public virtual float Evaluate(FbxTime pTime, SWIGTYPE_p_int pLast) {
    float ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Evaluate__SWIG_0(swigCPtr, FbxTime.getCPtr(pTime), SWIGTYPE_p_int.getCPtr(pLast));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float Evaluate(FbxTime pTime) {
    float ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Evaluate__SWIG_1(swigCPtr, FbxTime.getCPtr(pTime));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float EvaluateIndex(double pIndex) {
    float ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_EvaluateIndex(swigCPtr, pIndex);
    return ret;
  }

  public virtual bool GetTimeInterval(FbxTimeSpan pTimeInterval) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_GetTimeInterval(swigCPtr, FbxTimeSpan.getCPtr(pTimeInterval));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(FbxWrapperNativePINVOKE.FbxAnimCurveBase_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Store(FbxIO pFileObject, bool pLegacyVersion) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Store__SWIG_0(swigCPtr, FbxIO.getCPtr(pFileObject), pLegacyVersion);
    return ret;
  }

  public virtual bool Store(FbxIO pFileObject) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Store__SWIG_1(swigCPtr, FbxIO.getCPtr(pFileObject));
    return ret;
  }

  public virtual bool Retrieve(FbxIO pFileObject) {
    bool ret = FbxWrapperNativePINVOKE.FbxAnimCurveBase_Retrieve(swigCPtr, FbxIO.getCPtr(pFileObject));
    return ret;
  }

  public virtual void ExtrapolationSyncCallback() {
    FbxWrapperNativePINVOKE.FbxAnimCurveBase_ExtrapolationSyncCallback(swigCPtr);
  }

  public enum EExtrapolationType {
    eConstant = 1,
    eRepetition = 2,
    eMirrorRepetition = 3,
    eKeepSlope = 4,
    eRelativeRepetition = 5
  }

}

}

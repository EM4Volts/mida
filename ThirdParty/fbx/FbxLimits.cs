//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxLimits : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxLimits(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxLimits obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxLimits() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FbxWrapperNativePINVOKE.delete_FbxLimits(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxLimits() : this(FbxWrapperNativePINVOKE.new_FbxLimits(), true) {
  }

  public FbxLimits assign(FbxLimits pLimits) {
    FbxLimits ret = new FbxLimits(FbxWrapperNativePINVOKE.FbxLimits_assign(swigCPtr, FbxLimits.getCPtr(pLimits)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetActive(swigCPtr);
    return ret;
  }

  public void SetActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetActive(swigCPtr, pActive);
  }

  public bool GetMinXActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMinXActive(swigCPtr);
    return ret;
  }

  public bool GetMinYActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMinYActive(swigCPtr);
    return ret;
  }

  public bool GetMinZActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMinZActive(swigCPtr);
    return ret;
  }

  public void GetMinActive(SWIGTYPE_p_bool pXActive, SWIGTYPE_p_bool pYActive, SWIGTYPE_p_bool pZActive) {
    FbxWrapperNativePINVOKE.FbxLimits_GetMinActive(swigCPtr, SWIGTYPE_p_bool.getCPtr(pXActive), SWIGTYPE_p_bool.getCPtr(pYActive), SWIGTYPE_p_bool.getCPtr(pZActive));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxDouble3 GetMin() {
    FbxDouble3 ret = new FbxDouble3(FbxWrapperNativePINVOKE.FbxLimits_GetMin(swigCPtr), true);
    return ret;
  }

  public void SetMinXActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMinXActive(swigCPtr, pActive);
  }

  public void SetMinYActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMinYActive(swigCPtr, pActive);
  }

  public void SetMinZActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMinZActive(swigCPtr, pActive);
  }

  public void SetMinActive(bool pXActive, bool pYActive, bool pZActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMinActive(swigCPtr, pXActive, pYActive, pZActive);
  }

  public void SetMin(FbxDouble3 pMin) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMin(swigCPtr, FbxDouble3.getCPtr(pMin));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetMaxXActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMaxXActive(swigCPtr);
    return ret;
  }

  public bool GetMaxYActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMaxYActive(swigCPtr);
    return ret;
  }

  public bool GetMaxZActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetMaxZActive(swigCPtr);
    return ret;
  }

  public void GetMaxActive(SWIGTYPE_p_bool pXActive, SWIGTYPE_p_bool pYActive, SWIGTYPE_p_bool pZActive) {
    FbxWrapperNativePINVOKE.FbxLimits_GetMaxActive(swigCPtr, SWIGTYPE_p_bool.getCPtr(pXActive), SWIGTYPE_p_bool.getCPtr(pYActive), SWIGTYPE_p_bool.getCPtr(pZActive));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxDouble3 GetMax() {
    FbxDouble3 ret = new FbxDouble3(FbxWrapperNativePINVOKE.FbxLimits_GetMax(swigCPtr), true);
    return ret;
  }

  public void SetMaxXActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMaxXActive(swigCPtr, pActive);
  }

  public void SetMaxYActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMaxYActive(swigCPtr, pActive);
  }

  public void SetMaxZActive(bool pActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMaxZActive(swigCPtr, pActive);
  }

  public void SetMaxActive(bool pXActive, bool pYActive, bool pZActive) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMaxActive(swigCPtr, pXActive, pYActive, pZActive);
  }

  public void SetMax(FbxDouble3 pMax) {
    FbxWrapperNativePINVOKE.FbxLimits_SetMax(swigCPtr, FbxDouble3.getCPtr(pMax));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetAnyMinMaxActive() {
    bool ret = FbxWrapperNativePINVOKE.FbxLimits_GetAnyMinMaxActive(swigCPtr);
    return ret;
  }

  public FbxDouble3 Apply(FbxDouble3 pVector) {
    FbxDouble3 ret = new FbxDouble3(FbxWrapperNativePINVOKE.FbxLimits_Apply(swigCPtr, FbxDouble3.getCPtr(pVector)), true);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxPatch : FbxGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxPatch(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FbxWrapperNativePINVOKE.FbxPatch_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxPatch obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      FbxWrapperNativePINVOKE.FbxPatch_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxPatch_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(FbxWrapperNativePINVOKE.FbxPatch_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxPatch Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxPatch_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxPatch ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPatch(cPtr, false);
    return ret;
  }

  public new static FbxPatch Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxPatch_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxPatch ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPatch(cPtr, false);
    return ret;
  }

  public override FbxNodeAttribute.EType GetAttributeType() {
    FbxNodeAttribute.EType ret = (FbxNodeAttribute.EType)FbxWrapperNativePINVOKE.FbxPatch_GetAttributeType(swigCPtr);
    return ret;
  }

  public void Reset() {
    FbxWrapperNativePINVOKE.FbxPatch_Reset(swigCPtr);
  }

  public void SetSurfaceMode(FbxGeometry.ESurfaceMode pMode) {
    FbxWrapperNativePINVOKE.FbxPatch_SetSurfaceMode(swigCPtr, (int)pMode);
  }

  public FbxGeometry.ESurfaceMode GetSurfaceMode() {
    FbxGeometry.ESurfaceMode ret = (FbxGeometry.ESurfaceMode)FbxWrapperNativePINVOKE.FbxPatch_GetSurfaceMode(swigCPtr);
    return ret;
  }

  public void InitControlPoints(int pUCount, FbxPatch.EType pUType, int pVCount, FbxPatch.EType pVType) {
    FbxWrapperNativePINVOKE.FbxPatch_InitControlPoints__SWIG_0(swigCPtr, pUCount, (int)pUType, pVCount, (int)pVType);
  }

  public int GetUCount() {
    int ret = FbxWrapperNativePINVOKE.FbxPatch_GetUCount(swigCPtr);
    return ret;
  }

  public int GetVCount() {
    int ret = FbxWrapperNativePINVOKE.FbxPatch_GetVCount(swigCPtr);
    return ret;
  }

  public FbxPatch.EType GetPatchUType() {
    FbxPatch.EType ret = (FbxPatch.EType)FbxWrapperNativePINVOKE.FbxPatch_GetPatchUType(swigCPtr);
    return ret;
  }

  public FbxPatch.EType GetPatchVType() {
    FbxPatch.EType ret = (FbxPatch.EType)FbxWrapperNativePINVOKE.FbxPatch_GetPatchVType(swigCPtr);
    return ret;
  }

  public void SetStep(int pUStep, int pVStep) {
    FbxWrapperNativePINVOKE.FbxPatch_SetStep(swigCPtr, pUStep, pVStep);
  }

  public int GetUStep() {
    int ret = FbxWrapperNativePINVOKE.FbxPatch_GetUStep(swigCPtr);
    return ret;
  }

  public int GetVStep() {
    int ret = FbxWrapperNativePINVOKE.FbxPatch_GetVStep(swigCPtr);
    return ret;
  }

  public void SetClosed(bool pU, bool pV) {
    FbxWrapperNativePINVOKE.FbxPatch_SetClosed(swigCPtr, pU, pV);
  }

  public bool GetUClosed() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetUClosed(swigCPtr);
    return ret;
  }

  public bool GetVClosed() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetVClosed(swigCPtr);
    return ret;
  }

  public void SetUCapped(bool pUBottom, bool pUTop) {
    FbxWrapperNativePINVOKE.FbxPatch_SetUCapped(swigCPtr, pUBottom, pUTop);
  }

  public bool GetUCappedBottom() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetUCappedBottom(swigCPtr);
    return ret;
  }

  public bool GetUCappedTop() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetUCappedTop(swigCPtr);
    return ret;
  }

  public void SetVCapped(bool pVBottom, bool pVTop) {
    FbxWrapperNativePINVOKE.FbxPatch_SetVCapped(swigCPtr, pVBottom, pVTop);
  }

  public bool GetVCappedBottom() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetVCappedBottom(swigCPtr);
    return ret;
  }

  public bool GetVCappedTop() {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_GetVCappedTop(swigCPtr);
    return ret;
  }

  public override bool ContentWriteTo(FbxStream pStream) {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_ContentWriteTo(swigCPtr, FbxStream.getCPtr(pStream));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool ContentReadFrom(FbxStream pStream) {
    bool ret = FbxWrapperNativePINVOKE.FbxPatch_ContentReadFrom(swigCPtr, FbxStream.getCPtr(pStream));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(FbxWrapperNativePINVOKE.FbxPatch_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void InitControlPoints(int pCount) {
    FbxWrapperNativePINVOKE.FbxPatch_InitControlPoints__SWIG_1(swigCPtr, pCount);
  }

  public override void SetControlPointAt(FbxVector4 pCtrlPoint, int pIndex) {
    FbxWrapperNativePINVOKE.FbxPatch_SetControlPointAt(swigCPtr, FbxVector4.getCPtr(pCtrlPoint), pIndex);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum EType {
    eBezier,
    eBezierQuadric,
    eCardinal,
    eBSpline,
    eLinear
  }

}

}

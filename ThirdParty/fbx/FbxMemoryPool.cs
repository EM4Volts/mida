//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxMemoryPool : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxMemoryPool(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxMemoryPool obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxMemoryPool() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FbxWrapperNativePINVOKE.delete_FbxMemoryPool(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxMemoryPool(uint pBlockSize, SWIGTYPE_p_signed___int64 pBlockCount, bool pResizable, bool pConcurrent) : this(FbxWrapperNativePINVOKE.new_FbxMemoryPool__SWIG_0(pBlockSize, SWIGTYPE_p_signed___int64.getCPtr(pBlockCount), pResizable, pConcurrent), true) {
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxMemoryPool(uint pBlockSize, SWIGTYPE_p_signed___int64 pBlockCount, bool pResizable) : this(FbxWrapperNativePINVOKE.new_FbxMemoryPool__SWIG_1(pBlockSize, SWIGTYPE_p_signed___int64.getCPtr(pBlockCount), pResizable), true) {
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxMemoryPool(uint pBlockSize, SWIGTYPE_p_signed___int64 pBlockCount) : this(FbxWrapperNativePINVOKE.new_FbxMemoryPool__SWIG_2(pBlockSize, SWIGTYPE_p_signed___int64.getCPtr(pBlockCount)), true) {
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxMemoryPool(uint pBlockSize) : this(FbxWrapperNativePINVOKE.new_FbxMemoryPool__SWIG_3(pBlockSize), true) {
  }

  public void Reset() {
    FbxWrapperNativePINVOKE.FbxMemoryPool_Reset(swigCPtr);
  }

  public SWIGTYPE_p_void Allocate() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxMemoryPool_Allocate(swigCPtr);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public void Release(SWIGTYPE_p_void pMemBlock) {
    FbxWrapperNativePINVOKE.FbxMemoryPool_Release(swigCPtr, SWIGTYPE_p_void.getCPtr(pMemBlock));
  }

}

}

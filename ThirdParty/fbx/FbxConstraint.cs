//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxConstraint : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxConstraint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FbxWrapperNativePINVOKE.FbxConstraint_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxConstraint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      FbxWrapperNativePINVOKE.FbxConstraint_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(FbxWrapperNativePINVOKE.FbxConstraint_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxConstraint Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxConstraint(cPtr, false);
    return ret;
  }

  public new static FbxConstraint Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxConstraint ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxConstraint(cPtr, false);
    return ret;
  }

  public FbxPropertyTFbxDouble Weight {
    set {
      FbxWrapperNativePINVOKE.FbxConstraint_Weight_set(swigCPtr, FbxPropertyTFbxDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_Weight_get(swigCPtr);
      FbxPropertyTFbxDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyTFbxDouble(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t Active {
    set {
      FbxWrapperNativePINVOKE.FbxConstraint_Active_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_Active_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_bool_t Lock {
    set {
      FbxWrapperNativePINVOKE.FbxConstraint_Lock_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_bool_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_Lock_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_bool_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_bool_t(cPtr, false);
      return ret;
    } 
  }

  public virtual FbxConstraint.EType GetConstraintType() {
    FbxConstraint.EType ret = (FbxConstraint.EType)FbxWrapperNativePINVOKE.FbxConstraint_GetConstraintType(swigCPtr);
    return ret;
  }

  public virtual FbxObject GetConstrainedObject() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_GetConstrainedObject(swigCPtr);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    return ret;
  }

  public virtual int GetConstraintSourceCount() {
    int ret = FbxWrapperNativePINVOKE.FbxConstraint_GetConstraintSourceCount(swigCPtr);
    return ret;
  }

  public virtual FbxObject GetConstraintSource(int arg0) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxConstraint_GetConstraintSource(swigCPtr, arg0);
    FbxObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxObject(cPtr, false);
    return ret;
  }

  public double GetSourceWeight(FbxObject pObject) {
    double ret = FbxWrapperNativePINVOKE.FbxConstraint_GetSourceWeight(swigCPtr, FbxObject.getCPtr(pObject));
    return ret;
  }

  public enum EType {
    eUnknown,
    ePosition,
    eRotation,
    eScale,
    eParent,
    eSingleChainIK,
    eAim,
    eCharacter,
    eCustom
  }

}

}

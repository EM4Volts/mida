//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxGlobalCameraSettings : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxGlobalCameraSettings(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxGlobalCameraSettings obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool SetDefaultCamera(string pCameraName, FbxStatus pStatus) {
    bool ret = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_SetDefaultCamera__SWIG_0(swigCPtr, pCameraName, FbxStatus.getCPtr(pStatus));
    return ret;
  }

  public bool SetDefaultCamera(string pCameraName) {
    bool ret = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_SetDefaultCamera__SWIG_1(swigCPtr, pCameraName);
    return ret;
  }

  public string GetDefaultCamera() {
    string ret = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetDefaultCamera(swigCPtr);
    return ret;
  }

  public void RestoreDefaultSettings() {
    FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_RestoreDefaultSettings(swigCPtr);
  }

  public void SetDefaultViewingMode(FbxGlobalCameraSettings.EViewingMode pViewingMode) {
    FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_SetDefaultViewingMode(swigCPtr, (int)pViewingMode);
  }

  public FbxGlobalCameraSettings.EViewingMode GetDefaultViewingMode() {
    FbxGlobalCameraSettings.EViewingMode ret = (FbxGlobalCameraSettings.EViewingMode)FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetDefaultViewingMode(swigCPtr);
    return ret;
  }

  public void CreateProducerCameras() {
    FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_CreateProducerCameras(swigCPtr);
  }

  public void DestroyProducerCameras() {
    FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_DestroyProducerCameras(swigCPtr);
  }

  public bool IsProducerCamera(FbxCamera pCamera) {
    bool ret = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_IsProducerCamera(swigCPtr, FbxCamera.getCPtr(pCamera));
    return ret;
  }

  public FbxCamera GetCameraProducerPerspective() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerPerspective(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerFront() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerFront(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerBack() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerBack(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerLeft() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerLeft(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerRight() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerRight(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerTop() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerTop(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCamera GetCameraProducerBottom() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraProducerBottom(swigCPtr);
    FbxCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCamera(cPtr, false);
    return ret;
  }

  public FbxCameraSwitcher GetCameraSwitcher() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_GetCameraSwitcher(swigCPtr);
    FbxCameraSwitcher ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxCameraSwitcher(cPtr, false);
    return ret;
  }

  public void SetCameraSwitcher(FbxCameraSwitcher pSwitcher) {
    FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_SetCameraSwitcher(swigCPtr, FbxCameraSwitcher.getCPtr(pSwitcher));
  }

  public FbxGlobalCameraSettings assign(FbxGlobalCameraSettings pGlobalCameraSettings) {
    FbxGlobalCameraSettings ret = new FbxGlobalCameraSettings(FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_assign(swigCPtr, FbxGlobalCameraSettings.getCPtr(pGlobalCameraSettings)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool CopyProducerCamera(string pCameraName, FbxCamera pCamera) {
    bool ret = FbxWrapperNativePINVOKE.FbxGlobalCameraSettings_CopyProducerCamera(swigCPtr, pCameraName, FbxCamera.getCPtr(pCamera));
    return ret;
  }

  public enum EViewingMode {
    eStandard,
    eXRay,
    eModelsOnly
  }

}

}

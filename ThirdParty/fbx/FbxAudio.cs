//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxAudio : FbxMediaClip {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxAudio(global::System.IntPtr cPtr, bool cMemoryOwn) : base(FbxWrapperNativePINVOKE.FbxAudio_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAudio obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static FbxClassId ClassId {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_ClassId_set(FbxClassId.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_ClassId_get();
      FbxClassId ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxClassId(cPtr, false);
      return ret;
    } 
  }

  public override FbxClassId GetClassId() {
    FbxClassId ret = new FbxClassId(FbxWrapperNativePINVOKE.FbxAudio_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxAudio Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxAudio ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAudio(cPtr, false);
    return ret;
  }

  public new static FbxAudio Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxAudio ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAudio(cPtr, false);
    return ret;
  }

  public static FbxAudio Create(FbxScene pContainer, string pName) {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_Create__SWIG_2(FbxScene.getCPtr(pContainer), pName);
    FbxAudio ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAudio(cPtr, false);
    return ret;
  }

  public override void Reset() {
    FbxWrapperNativePINVOKE.FbxAudio_Reset(swigCPtr);
  }

  public SWIGTYPE_p_FbxPropertyTT_int_t BitRate {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_BitRate_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_BitRate_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_int_t SampleRate {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_SampleRate_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_SampleRate_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_unsigned_char_t Channels {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_Channels_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_unsigned_char_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_Channels_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_unsigned_char_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_unsigned_char_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_FbxTime_t Duration {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_Duration_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_FbxTime_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_Duration_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_FbxTime_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_FbxTime_t(cPtr, false);
      return ret;
    } 
  }

  public FbxProperty AnimFX {
    set {
      FbxWrapperNativePINVOKE.FbxAudio_AnimFX_set(swigCPtr, FbxProperty.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxAudio_AnimFX_get(swigCPtr);
      FbxProperty ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxProperty(cPtr, false);
      return ret;
    } 
  }

  public FbxProperty Volume() {
    FbxProperty ret = new FbxProperty(FbxWrapperNativePINVOKE.FbxAudio_Volume(swigCPtr), true);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(FbxWrapperNativePINVOKE.FbxAudio_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Internal.Fbx {

public class FbxArrayInt : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal FbxArrayInt(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxArrayInt obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FbxArrayInt() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FbxWrapperNativePINVOKE.delete_FbxArrayInt(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public FbxArrayInt() : this(FbxWrapperNativePINVOKE.new_FbxArrayInt__SWIG_0(), true) {
  }

  public FbxArrayInt(int pCapacity) : this(FbxWrapperNativePINVOKE.new_FbxArrayInt__SWIG_1(pCapacity), true) {
  }

  public FbxArrayInt(FbxArrayInt pArray) : this(FbxWrapperNativePINVOKE.new_FbxArrayInt__SWIG_2(FbxArrayInt.getCPtr(pArray)), true) {
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public int InsertAt(int pIndex, int pElement, bool pCompact) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_InsertAt__SWIG_0(swigCPtr, pIndex, pElement, pCompact);
    return ret;
  }

  public int InsertAt(int pIndex, int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_InsertAt__SWIG_1(swigCPtr, pIndex, pElement);
    return ret;
  }

  public int Add(int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_Add(swigCPtr, pElement);
    return ret;
  }

  public int AddUnique(int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_AddUnique(swigCPtr, pElement);
    return ret;
  }

  public int AddCompact(int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_AddCompact(swigCPtr, pElement);
    return ret;
  }

  public int Size() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_Size(swigCPtr);
    return ret;
  }

  public int Capacity() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_Capacity(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_int at(int pIndex) {
    SWIGTYPE_p_int ret = new SWIGTYPE_p_int(FbxWrapperNativePINVOKE.FbxArrayInt_at(swigCPtr, pIndex), false);
    return ret;
  }

  public int GetAt(int pIndex) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_GetAt(swigCPtr, pIndex);
    return ret;
  }

  public int GetFirst() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_GetFirst(swigCPtr);
    return ret;
  }

  public int GetLast() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_GetLast(swigCPtr);
    return ret;
  }

  public int Find(int pElement, int pStartIndex) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_Find__SWIG_0(swigCPtr, pElement, pStartIndex);
    return ret;
  }

  public int Find(int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_Find__SWIG_1(swigCPtr, pElement);
    return ret;
  }

  public int FindReverse(int pElement, int pStartIndex) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_FindReverse__SWIG_0(swigCPtr, pElement, pStartIndex);
    return ret;
  }

  public int FindReverse(int pElement) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_FindReverse__SWIG_1(swigCPtr, pElement);
    return ret;
  }

  public bool Reserve(int pCapacity) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_Reserve(swigCPtr, pCapacity);
    return ret;
  }

  public void SetAt(int pIndex, int pElement) {
    FbxWrapperNativePINVOKE.FbxArrayInt_SetAt(swigCPtr, pIndex, pElement);
  }

  public void SetFirst(int pElement) {
    FbxWrapperNativePINVOKE.FbxArrayInt_SetFirst(swigCPtr, pElement);
  }

  public void SetLast(int pElement) {
    FbxWrapperNativePINVOKE.FbxArrayInt_SetLast(swigCPtr, pElement);
  }

  public int RemoveAt(int pIndex) {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_RemoveAt(swigCPtr, pIndex);
    return ret;
  }

  public int RemoveFirst() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_RemoveFirst(swigCPtr);
    return ret;
  }

  public int RemoveLast() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_RemoveLast(swigCPtr);
    return ret;
  }

  public bool RemoveIt(int pElement) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_RemoveIt(swigCPtr, pElement);
    return ret;
  }

  public void RemoveRange(int pIndex, int pCount) {
    FbxWrapperNativePINVOKE.FbxArrayInt_RemoveRange(swigCPtr, pIndex, pCount);
  }

  public bool Resize(int pSize) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_Resize(swigCPtr, pSize);
    return ret;
  }

  public bool Grow(int pSize) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_Grow(swigCPtr, pSize);
    return ret;
  }

  public bool Shrink(int pSize) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_Shrink(swigCPtr, pSize);
    return ret;
  }

  public bool Compact() {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_Compact(swigCPtr);
    return ret;
  }

  public void Clear() {
    FbxWrapperNativePINVOKE.FbxArrayInt_Clear(swigCPtr);
  }

  public void Sort(SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int pCompareFunc) {
    FbxWrapperNativePINVOKE.FbxArrayInt_Sort(swigCPtr, SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int.getCPtr(pCompareFunc));
  }

  public SWIGTYPE_p_int GetArray() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxArrayInt_GetArray(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_int ToInt() {
    global::System.IntPtr cPtr = FbxWrapperNativePINVOKE.FbxArrayInt_ToInt(swigCPtr);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public void AddArray(FbxArrayInt pOther) {
    FbxWrapperNativePINVOKE.FbxArrayInt_AddArray(swigCPtr, FbxArrayInt.getCPtr(pOther));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddArrayNoDuplicate(FbxArrayInt pOther) {
    FbxWrapperNativePINVOKE.FbxArrayInt_AddArrayNoDuplicate(swigCPtr, FbxArrayInt.getCPtr(pOther));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveArray(FbxArrayInt pOther) {
    FbxWrapperNativePINVOKE.FbxArrayInt_RemoveArray(swigCPtr, FbxArrayInt.getCPtr(pOther));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
  }

  public FbxArrayInt assign(FbxArrayInt pOther) {
    FbxArrayInt ret = new FbxArrayInt(FbxWrapperNativePINVOKE.FbxArrayInt_assign(swigCPtr, FbxArrayInt.getCPtr(pOther)), false);
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool eq(FbxArrayInt pOther) {
    bool ret = FbxWrapperNativePINVOKE.FbxArrayInt_eq(swigCPtr, FbxArrayInt.getCPtr(pOther));
    if (FbxWrapperNativePINVOKE.SWIGPendingException.Pending) throw FbxWrapperNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetCount() {
    int ret = FbxWrapperNativePINVOKE.FbxArrayInt_GetCount(swigCPtr);
    return ret;
  }

}

}
